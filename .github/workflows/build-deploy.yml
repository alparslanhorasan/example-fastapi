name: Build and deploy app

on: [push, pull_request]

jobs:
  #job1: renamed to build:
  build:
    environment:
      name: testing
    env:
      # DATABASE_HOSTNAME: localhost
      # DATABASE_PORT:
      # DATABASE_PASSWORD: Passw0rd?
      # DATABASE_NAME: fastapi
      # DATABASE_USERNAME: postgres
      # SECRET_KEY: 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
      # ALGORITHM: HS256
      # ACCESS_TOKEN_EXPIRE_MINUTES: 30
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: Say hi to alp
        run: echo "Hi alp"
      - name: installing python
        uses: actions/setup-python@v3
        with:
          python-version: "3.x"
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Install all dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: |
          pip install pytest
          pytest
      # *************************************
      # Aşağıdaki alan CD için COMMENTED OUT
      # *************************************
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      #     # 887042f5-46f7-4901-b367-0820592ef5d0

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and push
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ahorasan:latest
      #     cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/ahorasan:buildcache
      #     cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/ahorasan:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production

    # steps:
    #   - name: deploying stuff
    #     run: echo "gonna deploy sone stuff"

    steps:
      - name: pulling git repo
        uses: actions/checkout@v2

      - name: deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            cd app/src
            git fetch
            echo ${{ secrets.PROD_PASSWORD }} | sudo -S systemctl restart api
